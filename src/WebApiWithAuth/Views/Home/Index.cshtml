@using System.Security.Claims
@using Microsoft.AspNet.Authorization
@inject UserManager<ApplicationUser> _userManager
@inject RoleManager<ApplicationRole> _roleManager
@inject SignInManager<ApplicationUser> _signinManager
@inject IAuthorizationService _authorizationService
@{ 
	ViewBag.Title = "Home";
}

@if (User.IsSignedIn())
{
	<h2>User Identities: (Count = @User.Identities.Count())</h2>
	@foreach(var identity in User.Identities)
	{
		<p>Name = @identity.Name</p>
		<h2>Identity claims:</h2>
		<ul>
			@foreach (var claim in identity.Claims)
			{
				<li><p>Type = @claim.Type, Value = @claim.Value</p></li>
			}
		</ul>
	}

	var user = await _userManager.FindByIdAsync(User.GetUserId());
	var roles = user.Roles.ToList();

	<p>===== ROLES COUNT: @roles.Count ========</p>

	<br />
	<p>Application User ID = @user.Id</p>
	<p>Application User Name = @user.UserName</p>
	<p>Application User Email = @user.Email</p>
	<h2>Application User Claims:</h2>
	<ul>
		@foreach (var claim in user.Claims)
		{
			<li>
				Type = @claim.ClaimType, Value = @claim.ClaimValue
			</li>
		}
	</ul>

	<h2>User Roles (Count = @user.Roles.Count()):</h2>

	<ol>
		@foreach(var role in user.Roles)
		{
			var appRole = await _roleManager.FindByIdAsync(role.RoleId);
			<li>
				<h3>@appRole.Name</h3>
				<p>Role Claims:</p>
				<ul>
					@foreach(var claim in appRole.Claims)
					{
						<li>Type = @claim.ClaimType, Value = @claim.ClaimValue</li>
					}
				</ul>
			</li>

		}
	</ol>

	var rolesOtherWay = await _userManager.GetRolesAsync(user);

	<p>Got roles other way:</p>
	<ul>
		@foreach (var role in rolesOtherWay)
		{
			<li>-- @role --</li>

		}
	</ul>
}
else
{
	<p>User is not authenticated</p>
}